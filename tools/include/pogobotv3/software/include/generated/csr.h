//--------------------------------------------------------------------------------
// Auto-generated by LiteX (3ab7eaa5) on 2024-10-23 13:56:15
//--------------------------------------------------------------------------------
#include <generated/soc.h>
#ifndef __GENERATED_CSR_H
#define __GENERATED_CSR_H
#include <stdint.h>
#include <system.h>
#ifndef CSR_ACCESSORS_DEFINED
#include <hw/common.h>
#endif /* ! CSR_ACCESSORS_DEFINED */
#ifndef CSR_BASE
#define CSR_BASE 0xf0000000L
#endif

/* ctrl */
#define CSR_CTRL_BASE (CSR_BASE + 0x0L)
#define CSR_CTRL_RESET_ADDR (CSR_BASE + 0x0L)
#define CSR_CTRL_RESET_SIZE 1
static inline uint32_t ctrl_reset_read(void) {
	return csr_read_simple(CSR_BASE + 0x0L);
}
static inline void ctrl_reset_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x0L);
}
#define CSR_CTRL_RESET_SOC_RST_OFFSET 0
#define CSR_CTRL_RESET_SOC_RST_SIZE 1
static inline uint32_t ctrl_reset_soc_rst_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t ctrl_reset_soc_rst_read(void) {
	uint32_t word = ctrl_reset_read();
	return ctrl_reset_soc_rst_extract(word);
}
static inline uint32_t ctrl_reset_soc_rst_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void ctrl_reset_soc_rst_write(uint32_t plain_value) {
	uint32_t oldword = ctrl_reset_read();
	uint32_t newword = ctrl_reset_soc_rst_replace(oldword, plain_value);
	ctrl_reset_write(newword);
}
#define CSR_CTRL_RESET_CPU_RST_OFFSET 1
#define CSR_CTRL_RESET_CPU_RST_SIZE 1
static inline uint32_t ctrl_reset_cpu_rst_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 1) & mask );
}
static inline uint32_t ctrl_reset_cpu_rst_read(void) {
	uint32_t word = ctrl_reset_read();
	return ctrl_reset_cpu_rst_extract(word);
}
static inline uint32_t ctrl_reset_cpu_rst_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void ctrl_reset_cpu_rst_write(uint32_t plain_value) {
	uint32_t oldword = ctrl_reset_read();
	uint32_t newword = ctrl_reset_cpu_rst_replace(oldword, plain_value);
	ctrl_reset_write(newword);
}
#define CSR_CTRL_SCRATCH_ADDR (CSR_BASE + 0x4L)
#define CSR_CTRL_SCRATCH_SIZE 1
static inline uint32_t ctrl_scratch_read(void) {
	return csr_read_simple(CSR_BASE + 0x4L);
}
static inline void ctrl_scratch_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x4L);
}
#define CSR_CTRL_BUS_ERRORS_ADDR (CSR_BASE + 0x8L)
#define CSR_CTRL_BUS_ERRORS_SIZE 1
static inline uint32_t ctrl_bus_errors_read(void) {
	return csr_read_simple(CSR_BASE + 0x8L);
}

/* gpio */
#define CSR_GPIO_BASE (CSR_BASE + 0x800L)
#define CSR_GPIO_GPO_ADDR (CSR_BASE + 0x800L)
#define CSR_GPIO_GPO_SIZE 1
static inline uint32_t gpio_gpo_read(void) {
	return csr_read_simple(CSR_BASE + 0x800L);
}
static inline void gpio_gpo_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x800L);
}
#define CSR_GPIO_GPO_RIGHT_MOTOR_DIR_OFFSET 0
#define CSR_GPIO_GPO_RIGHT_MOTOR_DIR_SIZE 1
static inline uint32_t gpio_gpo_right_motor_dir_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t gpio_gpo_right_motor_dir_read(void) {
	uint32_t word = gpio_gpo_read();
	return gpio_gpo_right_motor_dir_extract(word);
}
static inline uint32_t gpio_gpo_right_motor_dir_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void gpio_gpo_right_motor_dir_write(uint32_t plain_value) {
	uint32_t oldword = gpio_gpo_read();
	uint32_t newword = gpio_gpo_right_motor_dir_replace(oldword, plain_value);
	gpio_gpo_write(newword);
}
#define CSR_GPIO_GPO_LEFT_MOTOR_DIR_OFFSET 1
#define CSR_GPIO_GPO_LEFT_MOTOR_DIR_SIZE 1
static inline uint32_t gpio_gpo_left_motor_dir_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 1) & mask );
}
static inline uint32_t gpio_gpo_left_motor_dir_read(void) {
	uint32_t word = gpio_gpo_read();
	return gpio_gpo_left_motor_dir_extract(word);
}
static inline uint32_t gpio_gpo_left_motor_dir_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void gpio_gpo_left_motor_dir_write(uint32_t plain_value) {
	uint32_t oldword = gpio_gpo_read();
	uint32_t newword = gpio_gpo_left_motor_dir_replace(oldword, plain_value);
	gpio_gpo_write(newword);
}
#define CSR_GPIO_GPO_MIDDLE_MOTOR_DIR_OFFSET 2
#define CSR_GPIO_GPO_MIDDLE_MOTOR_DIR_SIZE 1
static inline uint32_t gpio_gpo_middle_motor_dir_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 2) & mask );
}
static inline uint32_t gpio_gpo_middle_motor_dir_read(void) {
	uint32_t word = gpio_gpo_read();
	return gpio_gpo_middle_motor_dir_extract(word);
}
static inline uint32_t gpio_gpo_middle_motor_dir_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 2))) | (mask & plain_value)<< 2 ;
}
static inline void gpio_gpo_middle_motor_dir_write(uint32_t plain_value) {
	uint32_t oldword = gpio_gpo_read();
	uint32_t newword = gpio_gpo_middle_motor_dir_replace(oldword, plain_value);
	gpio_gpo_write(newword);
}

/* identifier_mem */
#define CSR_IDENTIFIER_MEM_BASE (CSR_BASE + 0x1000L)

/* ir_rx0 */
#define CSR_IR_RX0_BASE (CSR_BASE + 0x1800L)
#define CSR_IR_RX0_RX_ADDR (CSR_BASE + 0x1800L)
#define CSR_IR_RX0_RX_SIZE 1
static inline uint32_t ir_rx0_rx_read(void) {
	return csr_read_simple(CSR_BASE + 0x1800L);
}
static inline void ir_rx0_rx_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x1800L);
}
#define CSR_IR_RX0_RXEMPTY_ADDR (CSR_BASE + 0x1804L)
#define CSR_IR_RX0_RXEMPTY_SIZE 1
static inline uint32_t ir_rx0_rxempty_read(void) {
	return csr_read_simple(CSR_BASE + 0x1804L);
}
#define CSR_IR_RX0_EV_STATUS_ADDR (CSR_BASE + 0x1808L)
#define CSR_IR_RX0_EV_STATUS_SIZE 1
static inline uint32_t ir_rx0_ev_status_read(void) {
	return csr_read_simple(CSR_BASE + 0x1808L);
}
#define CSR_IR_RX0_EV_STATUS_RX_OFFSET 0
#define CSR_IR_RX0_EV_STATUS_RX_SIZE 1
static inline uint32_t ir_rx0_ev_status_rx_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t ir_rx0_ev_status_rx_read(void) {
	uint32_t word = ir_rx0_ev_status_read();
	return ir_rx0_ev_status_rx_extract(word);
}
#define CSR_IR_RX0_EV_PENDING_ADDR (CSR_BASE + 0x180cL)
#define CSR_IR_RX0_EV_PENDING_SIZE 1
static inline uint32_t ir_rx0_ev_pending_read(void) {
	return csr_read_simple(CSR_BASE + 0x180cL);
}
static inline void ir_rx0_ev_pending_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x180cL);
}
#define CSR_IR_RX0_EV_PENDING_RX_OFFSET 0
#define CSR_IR_RX0_EV_PENDING_RX_SIZE 1
static inline uint32_t ir_rx0_ev_pending_rx_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t ir_rx0_ev_pending_rx_read(void) {
	uint32_t word = ir_rx0_ev_pending_read();
	return ir_rx0_ev_pending_rx_extract(word);
}
static inline uint32_t ir_rx0_ev_pending_rx_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void ir_rx0_ev_pending_rx_write(uint32_t plain_value) {
	uint32_t oldword = ir_rx0_ev_pending_read();
	uint32_t newword = ir_rx0_ev_pending_rx_replace(oldword, plain_value);
	ir_rx0_ev_pending_write(newword);
}
#define CSR_IR_RX0_EV_ENABLE_ADDR (CSR_BASE + 0x1810L)
#define CSR_IR_RX0_EV_ENABLE_SIZE 1
static inline uint32_t ir_rx0_ev_enable_read(void) {
	return csr_read_simple(CSR_BASE + 0x1810L);
}
static inline void ir_rx0_ev_enable_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x1810L);
}
#define CSR_IR_RX0_EV_ENABLE_RX_OFFSET 0
#define CSR_IR_RX0_EV_ENABLE_RX_SIZE 1
static inline uint32_t ir_rx0_ev_enable_rx_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t ir_rx0_ev_enable_rx_read(void) {
	uint32_t word = ir_rx0_ev_enable_read();
	return ir_rx0_ev_enable_rx_extract(word);
}
static inline uint32_t ir_rx0_ev_enable_rx_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void ir_rx0_ev_enable_rx_write(uint32_t plain_value) {
	uint32_t oldword = ir_rx0_ev_enable_read();
	uint32_t newword = ir_rx0_ev_enable_rx_replace(oldword, plain_value);
	ir_rx0_ev_enable_write(newword);
}
#define CSR_IR_RX0_RXFULL_ADDR (CSR_BASE + 0x1814L)
#define CSR_IR_RX0_RXFULL_SIZE 1
static inline uint32_t ir_rx0_rxfull_read(void) {
	return csr_read_simple(CSR_BASE + 0x1814L);
}
#define CSR_IR_RX0_IN_ADDR (CSR_BASE + 0x1818L)
#define CSR_IR_RX0_IN_SIZE 1
static inline uint32_t ir_rx0_in_read(void) {
	return csr_read_simple(CSR_BASE + 0x1818L);
}
#define CSR_IR_RX0_IN_D_R_OFFSET 0
#define CSR_IR_RX0_IN_D_R_SIZE 1
static inline uint32_t ir_rx0_in_d_r_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t ir_rx0_in_d_r_read(void) {
	uint32_t word = ir_rx0_in_read();
	return ir_rx0_in_d_r_extract(word);
}
#define CSR_IR_RX0_IN_E_R_OFFSET 1
#define CSR_IR_RX0_IN_E_R_SIZE 1
static inline uint32_t ir_rx0_in_e_r_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 1) & mask );
}
static inline uint32_t ir_rx0_in_e_r_read(void) {
	uint32_t word = ir_rx0_in_read();
	return ir_rx0_in_e_r_extract(word);
}
#define CSR_IR_RX0_CONF_ADDR (CSR_BASE + 0x181cL)
#define CSR_IR_RX0_CONF_SIZE 1
static inline uint32_t ir_rx0_conf_read(void) {
	return csr_read_simple(CSR_BASE + 0x181cL);
}
static inline void ir_rx0_conf_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x181cL);
}
#define CSR_IR_RX0_CONF_D_OE_OFFSET 0
#define CSR_IR_RX0_CONF_D_OE_SIZE 1
static inline uint32_t ir_rx0_conf_d_oe_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t ir_rx0_conf_d_oe_read(void) {
	uint32_t word = ir_rx0_conf_read();
	return ir_rx0_conf_d_oe_extract(word);
}
static inline uint32_t ir_rx0_conf_d_oe_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void ir_rx0_conf_d_oe_write(uint32_t plain_value) {
	uint32_t oldword = ir_rx0_conf_read();
	uint32_t newword = ir_rx0_conf_d_oe_replace(oldword, plain_value);
	ir_rx0_conf_write(newword);
}
#define CSR_IR_RX0_CONF_E_OE_OFFSET 1
#define CSR_IR_RX0_CONF_E_OE_SIZE 1
static inline uint32_t ir_rx0_conf_e_oe_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 1) & mask );
}
static inline uint32_t ir_rx0_conf_e_oe_read(void) {
	uint32_t word = ir_rx0_conf_read();
	return ir_rx0_conf_e_oe_extract(word);
}
static inline uint32_t ir_rx0_conf_e_oe_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void ir_rx0_conf_e_oe_write(uint32_t plain_value) {
	uint32_t oldword = ir_rx0_conf_read();
	uint32_t newword = ir_rx0_conf_e_oe_replace(oldword, plain_value);
	ir_rx0_conf_write(newword);
}
#define CSR_IR_RX0_CONF_D_W_OFFSET 2
#define CSR_IR_RX0_CONF_D_W_SIZE 1
static inline uint32_t ir_rx0_conf_d_w_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 2) & mask );
}
static inline uint32_t ir_rx0_conf_d_w_read(void) {
	uint32_t word = ir_rx0_conf_read();
	return ir_rx0_conf_d_w_extract(word);
}
static inline uint32_t ir_rx0_conf_d_w_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 2))) | (mask & plain_value)<< 2 ;
}
static inline void ir_rx0_conf_d_w_write(uint32_t plain_value) {
	uint32_t oldword = ir_rx0_conf_read();
	uint32_t newword = ir_rx0_conf_d_w_replace(oldword, plain_value);
	ir_rx0_conf_write(newword);
}
#define CSR_IR_RX0_CONF_E_W_OFFSET 3
#define CSR_IR_RX0_CONF_E_W_SIZE 1
static inline uint32_t ir_rx0_conf_e_w_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 3) & mask );
}
static inline uint32_t ir_rx0_conf_e_w_read(void) {
	uint32_t word = ir_rx0_conf_read();
	return ir_rx0_conf_e_w_extract(word);
}
static inline uint32_t ir_rx0_conf_e_w_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 3))) | (mask & plain_value)<< 3 ;
}
static inline void ir_rx0_conf_e_w_write(uint32_t plain_value) {
	uint32_t oldword = ir_rx0_conf_read();
	uint32_t newword = ir_rx0_conf_e_w_replace(oldword, plain_value);
	ir_rx0_conf_write(newword);
}
#define CSR_IR_RX0_CONF_ECHO_CANCEL_OFFSET 4
#define CSR_IR_RX0_CONF_ECHO_CANCEL_SIZE 1
static inline uint32_t ir_rx0_conf_echo_cancel_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 4) & mask );
}
static inline uint32_t ir_rx0_conf_echo_cancel_read(void) {
	uint32_t word = ir_rx0_conf_read();
	return ir_rx0_conf_echo_cancel_extract(word);
}
static inline uint32_t ir_rx0_conf_echo_cancel_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 4))) | (mask & plain_value)<< 4 ;
}
static inline void ir_rx0_conf_echo_cancel_write(uint32_t plain_value) {
	uint32_t oldword = ir_rx0_conf_read();
	uint32_t newword = ir_rx0_conf_echo_cancel_replace(oldword, plain_value);
	ir_rx0_conf_write(newword);
}
#define CSR_IR_RX0_CONF_TX_POWER_OFFSET 5
#define CSR_IR_RX0_CONF_TX_POWER_SIZE 2
static inline uint32_t ir_rx0_conf_tx_power_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 2)-1);
	return ( (oldword >> 5) & mask );
}
static inline uint32_t ir_rx0_conf_tx_power_read(void) {
	uint32_t word = ir_rx0_conf_read();
	return ir_rx0_conf_tx_power_extract(word);
}
static inline uint32_t ir_rx0_conf_tx_power_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 2)-1);
	return (oldword & (~(mask << 5))) | (mask & plain_value)<< 5 ;
}
static inline void ir_rx0_conf_tx_power_write(uint32_t plain_value) {
	uint32_t oldword = ir_rx0_conf_read();
	uint32_t newword = ir_rx0_conf_tx_power_replace(oldword, plain_value);
	ir_rx0_conf_write(newword);
}

/* ir_rx1 */
#define CSR_IR_RX1_BASE (CSR_BASE + 0x2000L)
#define CSR_IR_RX1_RX_ADDR (CSR_BASE + 0x2000L)
#define CSR_IR_RX1_RX_SIZE 1
static inline uint32_t ir_rx1_rx_read(void) {
	return csr_read_simple(CSR_BASE + 0x2000L);
}
static inline void ir_rx1_rx_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x2000L);
}
#define CSR_IR_RX1_RXEMPTY_ADDR (CSR_BASE + 0x2004L)
#define CSR_IR_RX1_RXEMPTY_SIZE 1
static inline uint32_t ir_rx1_rxempty_read(void) {
	return csr_read_simple(CSR_BASE + 0x2004L);
}
#define CSR_IR_RX1_EV_STATUS_ADDR (CSR_BASE + 0x2008L)
#define CSR_IR_RX1_EV_STATUS_SIZE 1
static inline uint32_t ir_rx1_ev_status_read(void) {
	return csr_read_simple(CSR_BASE + 0x2008L);
}
#define CSR_IR_RX1_EV_STATUS_RX_OFFSET 0
#define CSR_IR_RX1_EV_STATUS_RX_SIZE 1
static inline uint32_t ir_rx1_ev_status_rx_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t ir_rx1_ev_status_rx_read(void) {
	uint32_t word = ir_rx1_ev_status_read();
	return ir_rx1_ev_status_rx_extract(word);
}
#define CSR_IR_RX1_EV_PENDING_ADDR (CSR_BASE + 0x200cL)
#define CSR_IR_RX1_EV_PENDING_SIZE 1
static inline uint32_t ir_rx1_ev_pending_read(void) {
	return csr_read_simple(CSR_BASE + 0x200cL);
}
static inline void ir_rx1_ev_pending_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x200cL);
}
#define CSR_IR_RX1_EV_PENDING_RX_OFFSET 0
#define CSR_IR_RX1_EV_PENDING_RX_SIZE 1
static inline uint32_t ir_rx1_ev_pending_rx_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t ir_rx1_ev_pending_rx_read(void) {
	uint32_t word = ir_rx1_ev_pending_read();
	return ir_rx1_ev_pending_rx_extract(word);
}
static inline uint32_t ir_rx1_ev_pending_rx_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void ir_rx1_ev_pending_rx_write(uint32_t plain_value) {
	uint32_t oldword = ir_rx1_ev_pending_read();
	uint32_t newword = ir_rx1_ev_pending_rx_replace(oldword, plain_value);
	ir_rx1_ev_pending_write(newword);
}
#define CSR_IR_RX1_EV_ENABLE_ADDR (CSR_BASE + 0x2010L)
#define CSR_IR_RX1_EV_ENABLE_SIZE 1
static inline uint32_t ir_rx1_ev_enable_read(void) {
	return csr_read_simple(CSR_BASE + 0x2010L);
}
static inline void ir_rx1_ev_enable_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x2010L);
}
#define CSR_IR_RX1_EV_ENABLE_RX_OFFSET 0
#define CSR_IR_RX1_EV_ENABLE_RX_SIZE 1
static inline uint32_t ir_rx1_ev_enable_rx_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t ir_rx1_ev_enable_rx_read(void) {
	uint32_t word = ir_rx1_ev_enable_read();
	return ir_rx1_ev_enable_rx_extract(word);
}
static inline uint32_t ir_rx1_ev_enable_rx_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void ir_rx1_ev_enable_rx_write(uint32_t plain_value) {
	uint32_t oldword = ir_rx1_ev_enable_read();
	uint32_t newword = ir_rx1_ev_enable_rx_replace(oldword, plain_value);
	ir_rx1_ev_enable_write(newword);
}
#define CSR_IR_RX1_RXFULL_ADDR (CSR_BASE + 0x2014L)
#define CSR_IR_RX1_RXFULL_SIZE 1
static inline uint32_t ir_rx1_rxfull_read(void) {
	return csr_read_simple(CSR_BASE + 0x2014L);
}
#define CSR_IR_RX1_IN_ADDR (CSR_BASE + 0x2018L)
#define CSR_IR_RX1_IN_SIZE 1
static inline uint32_t ir_rx1_in_read(void) {
	return csr_read_simple(CSR_BASE + 0x2018L);
}
#define CSR_IR_RX1_IN_D_R_OFFSET 0
#define CSR_IR_RX1_IN_D_R_SIZE 1
static inline uint32_t ir_rx1_in_d_r_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t ir_rx1_in_d_r_read(void) {
	uint32_t word = ir_rx1_in_read();
	return ir_rx1_in_d_r_extract(word);
}
#define CSR_IR_RX1_IN_E_R_OFFSET 1
#define CSR_IR_RX1_IN_E_R_SIZE 1
static inline uint32_t ir_rx1_in_e_r_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 1) & mask );
}
static inline uint32_t ir_rx1_in_e_r_read(void) {
	uint32_t word = ir_rx1_in_read();
	return ir_rx1_in_e_r_extract(word);
}
#define CSR_IR_RX1_CONF_ADDR (CSR_BASE + 0x201cL)
#define CSR_IR_RX1_CONF_SIZE 1
static inline uint32_t ir_rx1_conf_read(void) {
	return csr_read_simple(CSR_BASE + 0x201cL);
}
static inline void ir_rx1_conf_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x201cL);
}
#define CSR_IR_RX1_CONF_D_OE_OFFSET 0
#define CSR_IR_RX1_CONF_D_OE_SIZE 1
static inline uint32_t ir_rx1_conf_d_oe_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t ir_rx1_conf_d_oe_read(void) {
	uint32_t word = ir_rx1_conf_read();
	return ir_rx1_conf_d_oe_extract(word);
}
static inline uint32_t ir_rx1_conf_d_oe_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void ir_rx1_conf_d_oe_write(uint32_t plain_value) {
	uint32_t oldword = ir_rx1_conf_read();
	uint32_t newword = ir_rx1_conf_d_oe_replace(oldword, plain_value);
	ir_rx1_conf_write(newword);
}
#define CSR_IR_RX1_CONF_E_OE_OFFSET 1
#define CSR_IR_RX1_CONF_E_OE_SIZE 1
static inline uint32_t ir_rx1_conf_e_oe_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 1) & mask );
}
static inline uint32_t ir_rx1_conf_e_oe_read(void) {
	uint32_t word = ir_rx1_conf_read();
	return ir_rx1_conf_e_oe_extract(word);
}
static inline uint32_t ir_rx1_conf_e_oe_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void ir_rx1_conf_e_oe_write(uint32_t plain_value) {
	uint32_t oldword = ir_rx1_conf_read();
	uint32_t newword = ir_rx1_conf_e_oe_replace(oldword, plain_value);
	ir_rx1_conf_write(newword);
}
#define CSR_IR_RX1_CONF_D_W_OFFSET 2
#define CSR_IR_RX1_CONF_D_W_SIZE 1
static inline uint32_t ir_rx1_conf_d_w_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 2) & mask );
}
static inline uint32_t ir_rx1_conf_d_w_read(void) {
	uint32_t word = ir_rx1_conf_read();
	return ir_rx1_conf_d_w_extract(word);
}
static inline uint32_t ir_rx1_conf_d_w_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 2))) | (mask & plain_value)<< 2 ;
}
static inline void ir_rx1_conf_d_w_write(uint32_t plain_value) {
	uint32_t oldword = ir_rx1_conf_read();
	uint32_t newword = ir_rx1_conf_d_w_replace(oldword, plain_value);
	ir_rx1_conf_write(newword);
}
#define CSR_IR_RX1_CONF_E_W_OFFSET 3
#define CSR_IR_RX1_CONF_E_W_SIZE 1
static inline uint32_t ir_rx1_conf_e_w_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 3) & mask );
}
static inline uint32_t ir_rx1_conf_e_w_read(void) {
	uint32_t word = ir_rx1_conf_read();
	return ir_rx1_conf_e_w_extract(word);
}
static inline uint32_t ir_rx1_conf_e_w_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 3))) | (mask & plain_value)<< 3 ;
}
static inline void ir_rx1_conf_e_w_write(uint32_t plain_value) {
	uint32_t oldword = ir_rx1_conf_read();
	uint32_t newword = ir_rx1_conf_e_w_replace(oldword, plain_value);
	ir_rx1_conf_write(newword);
}
#define CSR_IR_RX1_CONF_ECHO_CANCEL_OFFSET 4
#define CSR_IR_RX1_CONF_ECHO_CANCEL_SIZE 1
static inline uint32_t ir_rx1_conf_echo_cancel_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 4) & mask );
}
static inline uint32_t ir_rx1_conf_echo_cancel_read(void) {
	uint32_t word = ir_rx1_conf_read();
	return ir_rx1_conf_echo_cancel_extract(word);
}
static inline uint32_t ir_rx1_conf_echo_cancel_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 4))) | (mask & plain_value)<< 4 ;
}
static inline void ir_rx1_conf_echo_cancel_write(uint32_t plain_value) {
	uint32_t oldword = ir_rx1_conf_read();
	uint32_t newword = ir_rx1_conf_echo_cancel_replace(oldword, plain_value);
	ir_rx1_conf_write(newword);
}
#define CSR_IR_RX1_CONF_TX_POWER_OFFSET 5
#define CSR_IR_RX1_CONF_TX_POWER_SIZE 2
static inline uint32_t ir_rx1_conf_tx_power_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 2)-1);
	return ( (oldword >> 5) & mask );
}
static inline uint32_t ir_rx1_conf_tx_power_read(void) {
	uint32_t word = ir_rx1_conf_read();
	return ir_rx1_conf_tx_power_extract(word);
}
static inline uint32_t ir_rx1_conf_tx_power_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 2)-1);
	return (oldword & (~(mask << 5))) | (mask & plain_value)<< 5 ;
}
static inline void ir_rx1_conf_tx_power_write(uint32_t plain_value) {
	uint32_t oldword = ir_rx1_conf_read();
	uint32_t newword = ir_rx1_conf_tx_power_replace(oldword, plain_value);
	ir_rx1_conf_write(newword);
}

/* ir_rx2 */
#define CSR_IR_RX2_BASE (CSR_BASE + 0x2800L)
#define CSR_IR_RX2_RX_ADDR (CSR_BASE + 0x2800L)
#define CSR_IR_RX2_RX_SIZE 1
static inline uint32_t ir_rx2_rx_read(void) {
	return csr_read_simple(CSR_BASE + 0x2800L);
}
static inline void ir_rx2_rx_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x2800L);
}
#define CSR_IR_RX2_RXEMPTY_ADDR (CSR_BASE + 0x2804L)
#define CSR_IR_RX2_RXEMPTY_SIZE 1
static inline uint32_t ir_rx2_rxempty_read(void) {
	return csr_read_simple(CSR_BASE + 0x2804L);
}
#define CSR_IR_RX2_EV_STATUS_ADDR (CSR_BASE + 0x2808L)
#define CSR_IR_RX2_EV_STATUS_SIZE 1
static inline uint32_t ir_rx2_ev_status_read(void) {
	return csr_read_simple(CSR_BASE + 0x2808L);
}
#define CSR_IR_RX2_EV_STATUS_RX_OFFSET 0
#define CSR_IR_RX2_EV_STATUS_RX_SIZE 1
static inline uint32_t ir_rx2_ev_status_rx_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t ir_rx2_ev_status_rx_read(void) {
	uint32_t word = ir_rx2_ev_status_read();
	return ir_rx2_ev_status_rx_extract(word);
}
#define CSR_IR_RX2_EV_PENDING_ADDR (CSR_BASE + 0x280cL)
#define CSR_IR_RX2_EV_PENDING_SIZE 1
static inline uint32_t ir_rx2_ev_pending_read(void) {
	return csr_read_simple(CSR_BASE + 0x280cL);
}
static inline void ir_rx2_ev_pending_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x280cL);
}
#define CSR_IR_RX2_EV_PENDING_RX_OFFSET 0
#define CSR_IR_RX2_EV_PENDING_RX_SIZE 1
static inline uint32_t ir_rx2_ev_pending_rx_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t ir_rx2_ev_pending_rx_read(void) {
	uint32_t word = ir_rx2_ev_pending_read();
	return ir_rx2_ev_pending_rx_extract(word);
}
static inline uint32_t ir_rx2_ev_pending_rx_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void ir_rx2_ev_pending_rx_write(uint32_t plain_value) {
	uint32_t oldword = ir_rx2_ev_pending_read();
	uint32_t newword = ir_rx2_ev_pending_rx_replace(oldword, plain_value);
	ir_rx2_ev_pending_write(newword);
}
#define CSR_IR_RX2_EV_ENABLE_ADDR (CSR_BASE + 0x2810L)
#define CSR_IR_RX2_EV_ENABLE_SIZE 1
static inline uint32_t ir_rx2_ev_enable_read(void) {
	return csr_read_simple(CSR_BASE + 0x2810L);
}
static inline void ir_rx2_ev_enable_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x2810L);
}
#define CSR_IR_RX2_EV_ENABLE_RX_OFFSET 0
#define CSR_IR_RX2_EV_ENABLE_RX_SIZE 1
static inline uint32_t ir_rx2_ev_enable_rx_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t ir_rx2_ev_enable_rx_read(void) {
	uint32_t word = ir_rx2_ev_enable_read();
	return ir_rx2_ev_enable_rx_extract(word);
}
static inline uint32_t ir_rx2_ev_enable_rx_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void ir_rx2_ev_enable_rx_write(uint32_t plain_value) {
	uint32_t oldword = ir_rx2_ev_enable_read();
	uint32_t newword = ir_rx2_ev_enable_rx_replace(oldword, plain_value);
	ir_rx2_ev_enable_write(newword);
}
#define CSR_IR_RX2_RXFULL_ADDR (CSR_BASE + 0x2814L)
#define CSR_IR_RX2_RXFULL_SIZE 1
static inline uint32_t ir_rx2_rxfull_read(void) {
	return csr_read_simple(CSR_BASE + 0x2814L);
}
#define CSR_IR_RX2_IN_ADDR (CSR_BASE + 0x2818L)
#define CSR_IR_RX2_IN_SIZE 1
static inline uint32_t ir_rx2_in_read(void) {
	return csr_read_simple(CSR_BASE + 0x2818L);
}
#define CSR_IR_RX2_IN_D_R_OFFSET 0
#define CSR_IR_RX2_IN_D_R_SIZE 1
static inline uint32_t ir_rx2_in_d_r_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t ir_rx2_in_d_r_read(void) {
	uint32_t word = ir_rx2_in_read();
	return ir_rx2_in_d_r_extract(word);
}
#define CSR_IR_RX2_IN_E_R_OFFSET 1
#define CSR_IR_RX2_IN_E_R_SIZE 1
static inline uint32_t ir_rx2_in_e_r_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 1) & mask );
}
static inline uint32_t ir_rx2_in_e_r_read(void) {
	uint32_t word = ir_rx2_in_read();
	return ir_rx2_in_e_r_extract(word);
}
#define CSR_IR_RX2_CONF_ADDR (CSR_BASE + 0x281cL)
#define CSR_IR_RX2_CONF_SIZE 1
static inline uint32_t ir_rx2_conf_read(void) {
	return csr_read_simple(CSR_BASE + 0x281cL);
}
static inline void ir_rx2_conf_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x281cL);
}
#define CSR_IR_RX2_CONF_D_OE_OFFSET 0
#define CSR_IR_RX2_CONF_D_OE_SIZE 1
static inline uint32_t ir_rx2_conf_d_oe_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t ir_rx2_conf_d_oe_read(void) {
	uint32_t word = ir_rx2_conf_read();
	return ir_rx2_conf_d_oe_extract(word);
}
static inline uint32_t ir_rx2_conf_d_oe_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void ir_rx2_conf_d_oe_write(uint32_t plain_value) {
	uint32_t oldword = ir_rx2_conf_read();
	uint32_t newword = ir_rx2_conf_d_oe_replace(oldword, plain_value);
	ir_rx2_conf_write(newword);
}
#define CSR_IR_RX2_CONF_E_OE_OFFSET 1
#define CSR_IR_RX2_CONF_E_OE_SIZE 1
static inline uint32_t ir_rx2_conf_e_oe_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 1) & mask );
}
static inline uint32_t ir_rx2_conf_e_oe_read(void) {
	uint32_t word = ir_rx2_conf_read();
	return ir_rx2_conf_e_oe_extract(word);
}
static inline uint32_t ir_rx2_conf_e_oe_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void ir_rx2_conf_e_oe_write(uint32_t plain_value) {
	uint32_t oldword = ir_rx2_conf_read();
	uint32_t newword = ir_rx2_conf_e_oe_replace(oldword, plain_value);
	ir_rx2_conf_write(newword);
}
#define CSR_IR_RX2_CONF_D_W_OFFSET 2
#define CSR_IR_RX2_CONF_D_W_SIZE 1
static inline uint32_t ir_rx2_conf_d_w_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 2) & mask );
}
static inline uint32_t ir_rx2_conf_d_w_read(void) {
	uint32_t word = ir_rx2_conf_read();
	return ir_rx2_conf_d_w_extract(word);
}
static inline uint32_t ir_rx2_conf_d_w_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 2))) | (mask & plain_value)<< 2 ;
}
static inline void ir_rx2_conf_d_w_write(uint32_t plain_value) {
	uint32_t oldword = ir_rx2_conf_read();
	uint32_t newword = ir_rx2_conf_d_w_replace(oldword, plain_value);
	ir_rx2_conf_write(newword);
}
#define CSR_IR_RX2_CONF_E_W_OFFSET 3
#define CSR_IR_RX2_CONF_E_W_SIZE 1
static inline uint32_t ir_rx2_conf_e_w_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 3) & mask );
}
static inline uint32_t ir_rx2_conf_e_w_read(void) {
	uint32_t word = ir_rx2_conf_read();
	return ir_rx2_conf_e_w_extract(word);
}
static inline uint32_t ir_rx2_conf_e_w_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 3))) | (mask & plain_value)<< 3 ;
}
static inline void ir_rx2_conf_e_w_write(uint32_t plain_value) {
	uint32_t oldword = ir_rx2_conf_read();
	uint32_t newword = ir_rx2_conf_e_w_replace(oldword, plain_value);
	ir_rx2_conf_write(newword);
}
#define CSR_IR_RX2_CONF_ECHO_CANCEL_OFFSET 4
#define CSR_IR_RX2_CONF_ECHO_CANCEL_SIZE 1
static inline uint32_t ir_rx2_conf_echo_cancel_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 4) & mask );
}
static inline uint32_t ir_rx2_conf_echo_cancel_read(void) {
	uint32_t word = ir_rx2_conf_read();
	return ir_rx2_conf_echo_cancel_extract(word);
}
static inline uint32_t ir_rx2_conf_echo_cancel_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 4))) | (mask & plain_value)<< 4 ;
}
static inline void ir_rx2_conf_echo_cancel_write(uint32_t plain_value) {
	uint32_t oldword = ir_rx2_conf_read();
	uint32_t newword = ir_rx2_conf_echo_cancel_replace(oldword, plain_value);
	ir_rx2_conf_write(newword);
}
#define CSR_IR_RX2_CONF_TX_POWER_OFFSET 5
#define CSR_IR_RX2_CONF_TX_POWER_SIZE 2
static inline uint32_t ir_rx2_conf_tx_power_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 2)-1);
	return ( (oldword >> 5) & mask );
}
static inline uint32_t ir_rx2_conf_tx_power_read(void) {
	uint32_t word = ir_rx2_conf_read();
	return ir_rx2_conf_tx_power_extract(word);
}
static inline uint32_t ir_rx2_conf_tx_power_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 2)-1);
	return (oldword & (~(mask << 5))) | (mask & plain_value)<< 5 ;
}
static inline void ir_rx2_conf_tx_power_write(uint32_t plain_value) {
	uint32_t oldword = ir_rx2_conf_read();
	uint32_t newword = ir_rx2_conf_tx_power_replace(oldword, plain_value);
	ir_rx2_conf_write(newword);
}

/* ir_rx3 */
#define CSR_IR_RX3_BASE (CSR_BASE + 0x3000L)
#define CSR_IR_RX3_RX_ADDR (CSR_BASE + 0x3000L)
#define CSR_IR_RX3_RX_SIZE 1
static inline uint32_t ir_rx3_rx_read(void) {
	return csr_read_simple(CSR_BASE + 0x3000L);
}
static inline void ir_rx3_rx_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x3000L);
}
#define CSR_IR_RX3_RXEMPTY_ADDR (CSR_BASE + 0x3004L)
#define CSR_IR_RX3_RXEMPTY_SIZE 1
static inline uint32_t ir_rx3_rxempty_read(void) {
	return csr_read_simple(CSR_BASE + 0x3004L);
}
#define CSR_IR_RX3_EV_STATUS_ADDR (CSR_BASE + 0x3008L)
#define CSR_IR_RX3_EV_STATUS_SIZE 1
static inline uint32_t ir_rx3_ev_status_read(void) {
	return csr_read_simple(CSR_BASE + 0x3008L);
}
#define CSR_IR_RX3_EV_STATUS_RX_OFFSET 0
#define CSR_IR_RX3_EV_STATUS_RX_SIZE 1
static inline uint32_t ir_rx3_ev_status_rx_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t ir_rx3_ev_status_rx_read(void) {
	uint32_t word = ir_rx3_ev_status_read();
	return ir_rx3_ev_status_rx_extract(word);
}
#define CSR_IR_RX3_EV_PENDING_ADDR (CSR_BASE + 0x300cL)
#define CSR_IR_RX3_EV_PENDING_SIZE 1
static inline uint32_t ir_rx3_ev_pending_read(void) {
	return csr_read_simple(CSR_BASE + 0x300cL);
}
static inline void ir_rx3_ev_pending_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x300cL);
}
#define CSR_IR_RX3_EV_PENDING_RX_OFFSET 0
#define CSR_IR_RX3_EV_PENDING_RX_SIZE 1
static inline uint32_t ir_rx3_ev_pending_rx_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t ir_rx3_ev_pending_rx_read(void) {
	uint32_t word = ir_rx3_ev_pending_read();
	return ir_rx3_ev_pending_rx_extract(word);
}
static inline uint32_t ir_rx3_ev_pending_rx_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void ir_rx3_ev_pending_rx_write(uint32_t plain_value) {
	uint32_t oldword = ir_rx3_ev_pending_read();
	uint32_t newword = ir_rx3_ev_pending_rx_replace(oldword, plain_value);
	ir_rx3_ev_pending_write(newword);
}
#define CSR_IR_RX3_EV_ENABLE_ADDR (CSR_BASE + 0x3010L)
#define CSR_IR_RX3_EV_ENABLE_SIZE 1
static inline uint32_t ir_rx3_ev_enable_read(void) {
	return csr_read_simple(CSR_BASE + 0x3010L);
}
static inline void ir_rx3_ev_enable_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x3010L);
}
#define CSR_IR_RX3_EV_ENABLE_RX_OFFSET 0
#define CSR_IR_RX3_EV_ENABLE_RX_SIZE 1
static inline uint32_t ir_rx3_ev_enable_rx_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t ir_rx3_ev_enable_rx_read(void) {
	uint32_t word = ir_rx3_ev_enable_read();
	return ir_rx3_ev_enable_rx_extract(word);
}
static inline uint32_t ir_rx3_ev_enable_rx_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void ir_rx3_ev_enable_rx_write(uint32_t plain_value) {
	uint32_t oldword = ir_rx3_ev_enable_read();
	uint32_t newword = ir_rx3_ev_enable_rx_replace(oldword, plain_value);
	ir_rx3_ev_enable_write(newword);
}
#define CSR_IR_RX3_RXFULL_ADDR (CSR_BASE + 0x3014L)
#define CSR_IR_RX3_RXFULL_SIZE 1
static inline uint32_t ir_rx3_rxfull_read(void) {
	return csr_read_simple(CSR_BASE + 0x3014L);
}
#define CSR_IR_RX3_IN_ADDR (CSR_BASE + 0x3018L)
#define CSR_IR_RX3_IN_SIZE 1
static inline uint32_t ir_rx3_in_read(void) {
	return csr_read_simple(CSR_BASE + 0x3018L);
}
#define CSR_IR_RX3_IN_D_R_OFFSET 0
#define CSR_IR_RX3_IN_D_R_SIZE 1
static inline uint32_t ir_rx3_in_d_r_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t ir_rx3_in_d_r_read(void) {
	uint32_t word = ir_rx3_in_read();
	return ir_rx3_in_d_r_extract(word);
}
#define CSR_IR_RX3_IN_E_R_OFFSET 1
#define CSR_IR_RX3_IN_E_R_SIZE 1
static inline uint32_t ir_rx3_in_e_r_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 1) & mask );
}
static inline uint32_t ir_rx3_in_e_r_read(void) {
	uint32_t word = ir_rx3_in_read();
	return ir_rx3_in_e_r_extract(word);
}
#define CSR_IR_RX3_CONF_ADDR (CSR_BASE + 0x301cL)
#define CSR_IR_RX3_CONF_SIZE 1
static inline uint32_t ir_rx3_conf_read(void) {
	return csr_read_simple(CSR_BASE + 0x301cL);
}
static inline void ir_rx3_conf_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x301cL);
}
#define CSR_IR_RX3_CONF_D_OE_OFFSET 0
#define CSR_IR_RX3_CONF_D_OE_SIZE 1
static inline uint32_t ir_rx3_conf_d_oe_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t ir_rx3_conf_d_oe_read(void) {
	uint32_t word = ir_rx3_conf_read();
	return ir_rx3_conf_d_oe_extract(word);
}
static inline uint32_t ir_rx3_conf_d_oe_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void ir_rx3_conf_d_oe_write(uint32_t plain_value) {
	uint32_t oldword = ir_rx3_conf_read();
	uint32_t newword = ir_rx3_conf_d_oe_replace(oldword, plain_value);
	ir_rx3_conf_write(newword);
}
#define CSR_IR_RX3_CONF_E_OE_OFFSET 1
#define CSR_IR_RX3_CONF_E_OE_SIZE 1
static inline uint32_t ir_rx3_conf_e_oe_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 1) & mask );
}
static inline uint32_t ir_rx3_conf_e_oe_read(void) {
	uint32_t word = ir_rx3_conf_read();
	return ir_rx3_conf_e_oe_extract(word);
}
static inline uint32_t ir_rx3_conf_e_oe_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void ir_rx3_conf_e_oe_write(uint32_t plain_value) {
	uint32_t oldword = ir_rx3_conf_read();
	uint32_t newword = ir_rx3_conf_e_oe_replace(oldword, plain_value);
	ir_rx3_conf_write(newword);
}
#define CSR_IR_RX3_CONF_D_W_OFFSET 2
#define CSR_IR_RX3_CONF_D_W_SIZE 1
static inline uint32_t ir_rx3_conf_d_w_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 2) & mask );
}
static inline uint32_t ir_rx3_conf_d_w_read(void) {
	uint32_t word = ir_rx3_conf_read();
	return ir_rx3_conf_d_w_extract(word);
}
static inline uint32_t ir_rx3_conf_d_w_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 2))) | (mask & plain_value)<< 2 ;
}
static inline void ir_rx3_conf_d_w_write(uint32_t plain_value) {
	uint32_t oldword = ir_rx3_conf_read();
	uint32_t newword = ir_rx3_conf_d_w_replace(oldword, plain_value);
	ir_rx3_conf_write(newword);
}
#define CSR_IR_RX3_CONF_E_W_OFFSET 3
#define CSR_IR_RX3_CONF_E_W_SIZE 1
static inline uint32_t ir_rx3_conf_e_w_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 3) & mask );
}
static inline uint32_t ir_rx3_conf_e_w_read(void) {
	uint32_t word = ir_rx3_conf_read();
	return ir_rx3_conf_e_w_extract(word);
}
static inline uint32_t ir_rx3_conf_e_w_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 3))) | (mask & plain_value)<< 3 ;
}
static inline void ir_rx3_conf_e_w_write(uint32_t plain_value) {
	uint32_t oldword = ir_rx3_conf_read();
	uint32_t newword = ir_rx3_conf_e_w_replace(oldword, plain_value);
	ir_rx3_conf_write(newword);
}
#define CSR_IR_RX3_CONF_ECHO_CANCEL_OFFSET 4
#define CSR_IR_RX3_CONF_ECHO_CANCEL_SIZE 1
static inline uint32_t ir_rx3_conf_echo_cancel_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 4) & mask );
}
static inline uint32_t ir_rx3_conf_echo_cancel_read(void) {
	uint32_t word = ir_rx3_conf_read();
	return ir_rx3_conf_echo_cancel_extract(word);
}
static inline uint32_t ir_rx3_conf_echo_cancel_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 4))) | (mask & plain_value)<< 4 ;
}
static inline void ir_rx3_conf_echo_cancel_write(uint32_t plain_value) {
	uint32_t oldword = ir_rx3_conf_read();
	uint32_t newword = ir_rx3_conf_echo_cancel_replace(oldword, plain_value);
	ir_rx3_conf_write(newword);
}
#define CSR_IR_RX3_CONF_TX_POWER_OFFSET 5
#define CSR_IR_RX3_CONF_TX_POWER_SIZE 2
static inline uint32_t ir_rx3_conf_tx_power_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 2)-1);
	return ( (oldword >> 5) & mask );
}
static inline uint32_t ir_rx3_conf_tx_power_read(void) {
	uint32_t word = ir_rx3_conf_read();
	return ir_rx3_conf_tx_power_extract(word);
}
static inline uint32_t ir_rx3_conf_tx_power_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 2)-1);
	return (oldword & (~(mask << 5))) | (mask & plain_value)<< 5 ;
}
static inline void ir_rx3_conf_tx_power_write(uint32_t plain_value) {
	uint32_t oldword = ir_rx3_conf_read();
	uint32_t newword = ir_rx3_conf_tx_power_replace(oldword, plain_value);
	ir_rx3_conf_write(newword);
}

/* ir_tx */
#define CSR_IR_TX_BASE (CSR_BASE + 0x3800L)
#define CSR_IR_TX_TX_ADDR (CSR_BASE + 0x3800L)
#define CSR_IR_TX_TX_SIZE 1
static inline uint32_t ir_tx_tx_read(void) {
	return csr_read_simple(CSR_BASE + 0x3800L);
}
static inline void ir_tx_tx_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x3800L);
}
#define CSR_IR_TX_TXFULL_ADDR (CSR_BASE + 0x3804L)
#define CSR_IR_TX_TXFULL_SIZE 1
static inline uint32_t ir_tx_txfull_read(void) {
	return csr_read_simple(CSR_BASE + 0x3804L);
}
#define CSR_IR_TX_TXEMPTY_ADDR (CSR_BASE + 0x3808L)
#define CSR_IR_TX_TXEMPTY_SIZE 1
static inline uint32_t ir_tx_txempty_read(void) {
	return csr_read_simple(CSR_BASE + 0x3808L);
}
#define CSR_IR_TX_RTS_ADDR (CSR_BASE + 0x380cL)
#define CSR_IR_TX_RTS_SIZE 1
static inline uint32_t ir_tx_rts_read(void) {
	return csr_read_simple(CSR_BASE + 0x380cL);
}
#define CSR_IR_TX_CONF_ADDR (CSR_BASE + 0x3810L)
#define CSR_IR_TX_CONF_SIZE 1
static inline uint32_t ir_tx_conf_read(void) {
	return csr_read_simple(CSR_BASE + 0x3810L);
}
static inline void ir_tx_conf_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x3810L);
}
#define CSR_IR_TX_CONF_TX_MASK_OFFSET 0
#define CSR_IR_TX_CONF_TX_MASK_SIZE 4
static inline uint32_t ir_tx_conf_tx_mask_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 4)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t ir_tx_conf_tx_mask_read(void) {
	uint32_t word = ir_tx_conf_read();
	return ir_tx_conf_tx_mask_extract(word);
}
static inline uint32_t ir_tx_conf_tx_mask_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 4)-1);
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void ir_tx_conf_tx_mask_write(uint32_t plain_value) {
	uint32_t oldword = ir_tx_conf_read();
	uint32_t newword = ir_tx_conf_tx_mask_replace(oldword, plain_value);
	ir_tx_conf_write(newword);
}
#define CSR_IR_TX_CONF_TX_TRIG_OFFSET 4
#define CSR_IR_TX_CONF_TX_TRIG_SIZE 1
static inline uint32_t ir_tx_conf_tx_trig_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 4) & mask );
}
static inline uint32_t ir_tx_conf_tx_trig_read(void) {
	uint32_t word = ir_tx_conf_read();
	return ir_tx_conf_tx_trig_extract(word);
}
static inline uint32_t ir_tx_conf_tx_trig_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 4))) | (mask & plain_value)<< 4 ;
}
static inline void ir_tx_conf_tx_trig_write(uint32_t plain_value) {
	uint32_t oldword = ir_tx_conf_read();
	uint32_t newword = ir_tx_conf_tx_trig_replace(oldword, plain_value);
	ir_tx_conf_write(newword);
}

/* motor_left */
#define CSR_MOTOR_LEFT_BASE (CSR_BASE + 0x4000L)
#define CSR_MOTOR_LEFT_WIDTH_ADDR (CSR_BASE + 0x4000L)
#define CSR_MOTOR_LEFT_WIDTH_SIZE 1
static inline uint32_t motor_left_width_read(void) {
	return csr_read_simple(CSR_BASE + 0x4000L);
}
static inline void motor_left_width_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x4000L);
}

/* motor_middle */
#define CSR_MOTOR_MIDDLE_BASE (CSR_BASE + 0x4800L)
#define CSR_MOTOR_MIDDLE_WIDTH_ADDR (CSR_BASE + 0x4800L)
#define CSR_MOTOR_MIDDLE_WIDTH_SIZE 1
static inline uint32_t motor_middle_width_read(void) {
	return csr_read_simple(CSR_BASE + 0x4800L);
}
static inline void motor_middle_width_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x4800L);
}

/* motor_right */
#define CSR_MOTOR_RIGHT_BASE (CSR_BASE + 0x5000L)
#define CSR_MOTOR_RIGHT_WIDTH_ADDR (CSR_BASE + 0x5000L)
#define CSR_MOTOR_RIGHT_WIDTH_SIZE 1
static inline uint32_t motor_right_width_read(void) {
	return csr_read_simple(CSR_BASE + 0x5000L);
}
static inline void motor_right_width_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x5000L);
}

/* reboot */
#define CSR_REBOOT_BASE (CSR_BASE + 0x5800L)
#define CSR_REBOOT_CTRL_ADDR (CSR_BASE + 0x5800L)
#define CSR_REBOOT_CTRL_SIZE 1
static inline uint32_t reboot_ctrl_read(void) {
	return csr_read_simple(CSR_BASE + 0x5800L);
}
static inline void reboot_ctrl_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x5800L);
}
#define CSR_REBOOT_CTRL_IMAGE_OFFSET 0
#define CSR_REBOOT_CTRL_IMAGE_SIZE 2
static inline uint32_t reboot_ctrl_image_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 2)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t reboot_ctrl_image_read(void) {
	uint32_t word = reboot_ctrl_read();
	return reboot_ctrl_image_extract(word);
}
static inline uint32_t reboot_ctrl_image_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 2)-1);
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void reboot_ctrl_image_write(uint32_t plain_value) {
	uint32_t oldword = reboot_ctrl_read();
	uint32_t newword = reboot_ctrl_image_replace(oldword, plain_value);
	reboot_ctrl_write(newword);
}
#define CSR_REBOOT_CTRL_KEY_OFFSET 2
#define CSR_REBOOT_CTRL_KEY_SIZE 6
static inline uint32_t reboot_ctrl_key_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 6)-1);
	return ( (oldword >> 2) & mask );
}
static inline uint32_t reboot_ctrl_key_read(void) {
	uint32_t word = reboot_ctrl_read();
	return reboot_ctrl_key_extract(word);
}
static inline uint32_t reboot_ctrl_key_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 6)-1);
	return (oldword & (~(mask << 2))) | (mask & plain_value)<< 2 ;
}
static inline void reboot_ctrl_key_write(uint32_t plain_value) {
	uint32_t oldword = reboot_ctrl_read();
	uint32_t newword = reboot_ctrl_key_replace(oldword, plain_value);
	reboot_ctrl_write(newword);
}
#define CSR_REBOOT_ADDR_ADDR (CSR_BASE + 0x5804L)
#define CSR_REBOOT_ADDR_SIZE 1
static inline uint32_t reboot_addr_read(void) {
	return csr_read_simple(CSR_BASE + 0x5804L);
}
static inline void reboot_addr_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x5804L);
}

/* rgb */
#define CSR_RGB_BASE (CSR_BASE + 0x6000L)
#define CSR_RGB_DATA_ADDR (CSR_BASE + 0x6000L)
#define CSR_RGB_DATA_SIZE 1
static inline uint32_t rgb_data_read(void) {
	return csr_read_simple(CSR_BASE + 0x6000L);
}
static inline void rgb_data_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x6000L);
}
#define CSR_RGB_ENABLE_ADDR (CSR_BASE + 0x6004L)
#define CSR_RGB_ENABLE_SIZE 1
static inline uint32_t rgb_enable_read(void) {
	return csr_read_simple(CSR_BASE + 0x6004L);
}
static inline void rgb_enable_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x6004L);
}
#define CSR_RGB_ENABLE_ENABLE_OFFSET 0
#define CSR_RGB_ENABLE_ENABLE_SIZE 1
static inline uint32_t rgb_enable_enable_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t rgb_enable_enable_read(void) {
	uint32_t word = rgb_enable_read();
	return rgb_enable_enable_extract(word);
}
static inline uint32_t rgb_enable_enable_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void rgb_enable_enable_write(uint32_t plain_value) {
	uint32_t oldword = rgb_enable_read();
	uint32_t newword = rgb_enable_enable_replace(oldword, plain_value);
	rgb_enable_write(newword);
}
#define CSR_RGB_FIFO_ADDR (CSR_BASE + 0x6008L)
#define CSR_RGB_FIFO_SIZE 1
static inline uint32_t rgb_fifo_read(void) {
	return csr_read_simple(CSR_BASE + 0x6008L);
}

/* spi_cs */
#define CSR_SPI_CS_BASE (CSR_BASE + 0x6800L)
#define CSR_SPI_CS_SPI_CS_N_ADDR (CSR_BASE + 0x6800L)
#define CSR_SPI_CS_SPI_CS_N_SIZE 1
static inline uint32_t spi_cs_spi_cs_n_read(void) {
	return csr_read_simple(CSR_BASE + 0x6800L);
}
static inline void spi_cs_spi_cs_n_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x6800L);
}
#define CSR_SPI_CS_SPI_CS_N_IMU_CS_N_OFFSET 0
#define CSR_SPI_CS_SPI_CS_N_IMU_CS_N_SIZE 1
static inline uint32_t spi_cs_spi_cs_n_imu_cs_n_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t spi_cs_spi_cs_n_imu_cs_n_read(void) {
	uint32_t word = spi_cs_spi_cs_n_read();
	return spi_cs_spi_cs_n_imu_cs_n_extract(word);
}
static inline uint32_t spi_cs_spi_cs_n_imu_cs_n_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void spi_cs_spi_cs_n_imu_cs_n_write(uint32_t plain_value) {
	uint32_t oldword = spi_cs_spi_cs_n_read();
	uint32_t newword = spi_cs_spi_cs_n_imu_cs_n_replace(oldword, plain_value);
	spi_cs_spi_cs_n_write(newword);
}
#define CSR_SPI_CS_SPI_CS_N_ADC_CS_N_OFFSET 1
#define CSR_SPI_CS_SPI_CS_N_ADC_CS_N_SIZE 1
static inline uint32_t spi_cs_spi_cs_n_adc_cs_n_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 1) & mask );
}
static inline uint32_t spi_cs_spi_cs_n_adc_cs_n_read(void) {
	uint32_t word = spi_cs_spi_cs_n_read();
	return spi_cs_spi_cs_n_adc_cs_n_extract(word);
}
static inline uint32_t spi_cs_spi_cs_n_adc_cs_n_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void spi_cs_spi_cs_n_adc_cs_n_write(uint32_t plain_value) {
	uint32_t oldword = spi_cs_spi_cs_n_read();
	uint32_t newword = spi_cs_spi_cs_n_adc_cs_n_replace(oldword, plain_value);
	spi_cs_spi_cs_n_write(newword);
}

/* spiflash */
#define CSR_SPIFLASH_BASE (CSR_BASE + 0x7000L)
#define CSR_SPIFLASH_BITBANG_ADDR (CSR_BASE + 0x7000L)
#define CSR_SPIFLASH_BITBANG_SIZE 1
static inline uint32_t spiflash_bitbang_read(void) {
	return csr_read_simple(CSR_BASE + 0x7000L);
}
static inline void spiflash_bitbang_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x7000L);
}
#define CSR_SPIFLASH_BITBANG_MOSI_OFFSET 0
#define CSR_SPIFLASH_BITBANG_MOSI_SIZE 1
static inline uint32_t spiflash_bitbang_mosi_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t spiflash_bitbang_mosi_read(void) {
	uint32_t word = spiflash_bitbang_read();
	return spiflash_bitbang_mosi_extract(word);
}
static inline uint32_t spiflash_bitbang_mosi_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void spiflash_bitbang_mosi_write(uint32_t plain_value) {
	uint32_t oldword = spiflash_bitbang_read();
	uint32_t newword = spiflash_bitbang_mosi_replace(oldword, plain_value);
	spiflash_bitbang_write(newword);
}
#define CSR_SPIFLASH_BITBANG_CLK_OFFSET 1
#define CSR_SPIFLASH_BITBANG_CLK_SIZE 1
static inline uint32_t spiflash_bitbang_clk_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 1) & mask );
}
static inline uint32_t spiflash_bitbang_clk_read(void) {
	uint32_t word = spiflash_bitbang_read();
	return spiflash_bitbang_clk_extract(word);
}
static inline uint32_t spiflash_bitbang_clk_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void spiflash_bitbang_clk_write(uint32_t plain_value) {
	uint32_t oldword = spiflash_bitbang_read();
	uint32_t newword = spiflash_bitbang_clk_replace(oldword, plain_value);
	spiflash_bitbang_write(newword);
}
#define CSR_SPIFLASH_BITBANG_CS_N_OFFSET 2
#define CSR_SPIFLASH_BITBANG_CS_N_SIZE 1
static inline uint32_t spiflash_bitbang_cs_n_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 2) & mask );
}
static inline uint32_t spiflash_bitbang_cs_n_read(void) {
	uint32_t word = spiflash_bitbang_read();
	return spiflash_bitbang_cs_n_extract(word);
}
static inline uint32_t spiflash_bitbang_cs_n_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 2))) | (mask & plain_value)<< 2 ;
}
static inline void spiflash_bitbang_cs_n_write(uint32_t plain_value) {
	uint32_t oldword = spiflash_bitbang_read();
	uint32_t newword = spiflash_bitbang_cs_n_replace(oldword, plain_value);
	spiflash_bitbang_write(newword);
}
#define CSR_SPIFLASH_BITBANG_RAM_CS_N_OFFSET 3
#define CSR_SPIFLASH_BITBANG_RAM_CS_N_SIZE 1
static inline uint32_t spiflash_bitbang_ram_cs_n_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 3) & mask );
}
static inline uint32_t spiflash_bitbang_ram_cs_n_read(void) {
	uint32_t word = spiflash_bitbang_read();
	return spiflash_bitbang_ram_cs_n_extract(word);
}
static inline uint32_t spiflash_bitbang_ram_cs_n_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 3))) | (mask & plain_value)<< 3 ;
}
static inline void spiflash_bitbang_ram_cs_n_write(uint32_t plain_value) {
	uint32_t oldword = spiflash_bitbang_read();
	uint32_t newword = spiflash_bitbang_ram_cs_n_replace(oldword, plain_value);
	spiflash_bitbang_write(newword);
}
#define CSR_SPIFLASH_MISO_ADDR (CSR_BASE + 0x7004L)
#define CSR_SPIFLASH_MISO_SIZE 1
static inline uint32_t spiflash_miso_read(void) {
	return csr_read_simple(CSR_BASE + 0x7004L);
}
#define CSR_SPIFLASH_BITBANG_EN_ADDR (CSR_BASE + 0x7008L)
#define CSR_SPIFLASH_BITBANG_EN_SIZE 1
static inline uint32_t spiflash_bitbang_en_read(void) {
	return csr_read_simple(CSR_BASE + 0x7008L);
}
static inline void spiflash_bitbang_en_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x7008L);
}

/* timer0 */
#define CSR_TIMER0_BASE (CSR_BASE + 0x7800L)
#define CSR_TIMER0_LOAD_ADDR (CSR_BASE + 0x7800L)
#define CSR_TIMER0_LOAD_SIZE 1
static inline uint32_t timer0_load_read(void) {
	return csr_read_simple(CSR_BASE + 0x7800L);
}
static inline void timer0_load_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x7800L);
}
#define CSR_TIMER0_RELOAD_ADDR (CSR_BASE + 0x7804L)
#define CSR_TIMER0_RELOAD_SIZE 1
static inline uint32_t timer0_reload_read(void) {
	return csr_read_simple(CSR_BASE + 0x7804L);
}
static inline void timer0_reload_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x7804L);
}
#define CSR_TIMER0_EN_ADDR (CSR_BASE + 0x7808L)
#define CSR_TIMER0_EN_SIZE 1
static inline uint32_t timer0_en_read(void) {
	return csr_read_simple(CSR_BASE + 0x7808L);
}
static inline void timer0_en_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x7808L);
}
#define CSR_TIMER0_UPDATE_VALUE_ADDR (CSR_BASE + 0x780cL)
#define CSR_TIMER0_UPDATE_VALUE_SIZE 1
static inline uint32_t timer0_update_value_read(void) {
	return csr_read_simple(CSR_BASE + 0x780cL);
}
static inline void timer0_update_value_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x780cL);
}
#define CSR_TIMER0_VALUE_ADDR (CSR_BASE + 0x7810L)
#define CSR_TIMER0_VALUE_SIZE 1
static inline uint32_t timer0_value_read(void) {
	return csr_read_simple(CSR_BASE + 0x7810L);
}
#define CSR_TIMER0_EV_STATUS_ADDR (CSR_BASE + 0x7814L)
#define CSR_TIMER0_EV_STATUS_SIZE 1
static inline uint32_t timer0_ev_status_read(void) {
	return csr_read_simple(CSR_BASE + 0x7814L);
}
#define CSR_TIMER0_EV_STATUS_ZERO_OFFSET 0
#define CSR_TIMER0_EV_STATUS_ZERO_SIZE 1
static inline uint32_t timer0_ev_status_zero_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t timer0_ev_status_zero_read(void) {
	uint32_t word = timer0_ev_status_read();
	return timer0_ev_status_zero_extract(word);
}
#define CSR_TIMER0_EV_PENDING_ADDR (CSR_BASE + 0x7818L)
#define CSR_TIMER0_EV_PENDING_SIZE 1
static inline uint32_t timer0_ev_pending_read(void) {
	return csr_read_simple(CSR_BASE + 0x7818L);
}
static inline void timer0_ev_pending_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x7818L);
}
#define CSR_TIMER0_EV_PENDING_ZERO_OFFSET 0
#define CSR_TIMER0_EV_PENDING_ZERO_SIZE 1
static inline uint32_t timer0_ev_pending_zero_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t timer0_ev_pending_zero_read(void) {
	uint32_t word = timer0_ev_pending_read();
	return timer0_ev_pending_zero_extract(word);
}
static inline uint32_t timer0_ev_pending_zero_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void timer0_ev_pending_zero_write(uint32_t plain_value) {
	uint32_t oldword = timer0_ev_pending_read();
	uint32_t newword = timer0_ev_pending_zero_replace(oldword, plain_value);
	timer0_ev_pending_write(newword);
}
#define CSR_TIMER0_EV_ENABLE_ADDR (CSR_BASE + 0x781cL)
#define CSR_TIMER0_EV_ENABLE_SIZE 1
static inline uint32_t timer0_ev_enable_read(void) {
	return csr_read_simple(CSR_BASE + 0x781cL);
}
static inline void timer0_ev_enable_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x781cL);
}
#define CSR_TIMER0_EV_ENABLE_ZERO_OFFSET 0
#define CSR_TIMER0_EV_ENABLE_ZERO_SIZE 1
static inline uint32_t timer0_ev_enable_zero_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t timer0_ev_enable_zero_read(void) {
	uint32_t word = timer0_ev_enable_read();
	return timer0_ev_enable_zero_extract(word);
}
static inline uint32_t timer0_ev_enable_zero_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void timer0_ev_enable_zero_write(uint32_t plain_value) {
	uint32_t oldword = timer0_ev_enable_read();
	uint32_t newword = timer0_ev_enable_zero_replace(oldword, plain_value);
	timer0_ev_enable_write(newword);
}

/* uart */
#define CSR_UART_BASE (CSR_BASE + 0x8000L)
#define CSR_UART_RXTX_ADDR (CSR_BASE + 0x8000L)
#define CSR_UART_RXTX_SIZE 1
static inline uint32_t uart_rxtx_read(void) {
	return csr_read_simple(CSR_BASE + 0x8000L);
}
static inline void uart_rxtx_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x8000L);
}
#define CSR_UART_TXFULL_ADDR (CSR_BASE + 0x8004L)
#define CSR_UART_TXFULL_SIZE 1
static inline uint32_t uart_txfull_read(void) {
	return csr_read_simple(CSR_BASE + 0x8004L);
}
#define CSR_UART_RXEMPTY_ADDR (CSR_BASE + 0x8008L)
#define CSR_UART_RXEMPTY_SIZE 1
static inline uint32_t uart_rxempty_read(void) {
	return csr_read_simple(CSR_BASE + 0x8008L);
}
#define CSR_UART_EV_STATUS_ADDR (CSR_BASE + 0x800cL)
#define CSR_UART_EV_STATUS_SIZE 1
static inline uint32_t uart_ev_status_read(void) {
	return csr_read_simple(CSR_BASE + 0x800cL);
}
#define CSR_UART_EV_STATUS_TX_OFFSET 0
#define CSR_UART_EV_STATUS_TX_SIZE 1
static inline uint32_t uart_ev_status_tx_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t uart_ev_status_tx_read(void) {
	uint32_t word = uart_ev_status_read();
	return uart_ev_status_tx_extract(word);
}
#define CSR_UART_EV_STATUS_RX_OFFSET 1
#define CSR_UART_EV_STATUS_RX_SIZE 1
static inline uint32_t uart_ev_status_rx_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 1) & mask );
}
static inline uint32_t uart_ev_status_rx_read(void) {
	uint32_t word = uart_ev_status_read();
	return uart_ev_status_rx_extract(word);
}
#define CSR_UART_EV_PENDING_ADDR (CSR_BASE + 0x8010L)
#define CSR_UART_EV_PENDING_SIZE 1
static inline uint32_t uart_ev_pending_read(void) {
	return csr_read_simple(CSR_BASE + 0x8010L);
}
static inline void uart_ev_pending_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x8010L);
}
#define CSR_UART_EV_PENDING_TX_OFFSET 0
#define CSR_UART_EV_PENDING_TX_SIZE 1
static inline uint32_t uart_ev_pending_tx_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t uart_ev_pending_tx_read(void) {
	uint32_t word = uart_ev_pending_read();
	return uart_ev_pending_tx_extract(word);
}
static inline uint32_t uart_ev_pending_tx_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void uart_ev_pending_tx_write(uint32_t plain_value) {
	uint32_t oldword = uart_ev_pending_read();
	uint32_t newword = uart_ev_pending_tx_replace(oldword, plain_value);
	uart_ev_pending_write(newword);
}
#define CSR_UART_EV_PENDING_RX_OFFSET 1
#define CSR_UART_EV_PENDING_RX_SIZE 1
static inline uint32_t uart_ev_pending_rx_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 1) & mask );
}
static inline uint32_t uart_ev_pending_rx_read(void) {
	uint32_t word = uart_ev_pending_read();
	return uart_ev_pending_rx_extract(word);
}
static inline uint32_t uart_ev_pending_rx_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void uart_ev_pending_rx_write(uint32_t plain_value) {
	uint32_t oldword = uart_ev_pending_read();
	uint32_t newword = uart_ev_pending_rx_replace(oldword, plain_value);
	uart_ev_pending_write(newword);
}
#define CSR_UART_EV_ENABLE_ADDR (CSR_BASE + 0x8014L)
#define CSR_UART_EV_ENABLE_SIZE 1
static inline uint32_t uart_ev_enable_read(void) {
	return csr_read_simple(CSR_BASE + 0x8014L);
}
static inline void uart_ev_enable_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x8014L);
}
#define CSR_UART_EV_ENABLE_TX_OFFSET 0
#define CSR_UART_EV_ENABLE_TX_SIZE 1
static inline uint32_t uart_ev_enable_tx_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t uart_ev_enable_tx_read(void) {
	uint32_t word = uart_ev_enable_read();
	return uart_ev_enable_tx_extract(word);
}
static inline uint32_t uart_ev_enable_tx_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void uart_ev_enable_tx_write(uint32_t plain_value) {
	uint32_t oldword = uart_ev_enable_read();
	uint32_t newword = uart_ev_enable_tx_replace(oldword, plain_value);
	uart_ev_enable_write(newword);
}
#define CSR_UART_EV_ENABLE_RX_OFFSET 1
#define CSR_UART_EV_ENABLE_RX_SIZE 1
static inline uint32_t uart_ev_enable_rx_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 1) & mask );
}
static inline uint32_t uart_ev_enable_rx_read(void) {
	uint32_t word = uart_ev_enable_read();
	return uart_ev_enable_rx_extract(word);
}
static inline uint32_t uart_ev_enable_rx_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void uart_ev_enable_rx_write(uint32_t plain_value) {
	uint32_t oldword = uart_ev_enable_read();
	uint32_t newword = uart_ev_enable_rx_replace(oldword, plain_value);
	uart_ev_enable_write(newword);
}
#define CSR_UART_TXEMPTY_ADDR (CSR_BASE + 0x8018L)
#define CSR_UART_TXEMPTY_SIZE 1
static inline uint32_t uart_txempty_read(void) {
	return csr_read_simple(CSR_BASE + 0x8018L);
}
#define CSR_UART_RXFULL_ADDR (CSR_BASE + 0x801cL)
#define CSR_UART_RXFULL_SIZE 1
static inline uint32_t uart_rxfull_read(void) {
	return csr_read_simple(CSR_BASE + 0x801cL);
}

#endif
